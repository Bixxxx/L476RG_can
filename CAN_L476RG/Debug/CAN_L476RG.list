
CAN_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a80  08002a80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a80  08002a80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a80  08002a80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08002a94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002a94  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcef  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4c  00000000  00000000  0002dd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  000305f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cc7  00000000  00000000  00031190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d002  00000000  00000000  00056e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eccfb  00000000  00000000  00063e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d0  00000000  00000000  00150ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a20 	.word	0x08002a20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a20 	.word	0x08002a20

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	TxData[0] = 5;
 80001cc:	4b25      	ldr	r3, [pc, #148]	; (8000264 <main+0x9c>)
 80001ce:	2205      	movs	r2, #5
 80001d0:	701a      	strb	r2, [r3, #0]
	TxData[1] = 1;
 80001d2:	4b24      	ldr	r3, [pc, #144]	; (8000264 <main+0x9c>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0xFF;
 80001d8:	4b22      	ldr	r3, [pc, #136]	; (8000264 <main+0x9c>)
 80001da:	22ff      	movs	r2, #255	; 0xff
 80001dc:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x0;
 80001de:	4b21      	ldr	r3, [pc, #132]	; (8000264 <main+0x9c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0xFF;
 80001e4:	4b1f      	ldr	r3, [pc, #124]	; (8000264 <main+0x9c>)
 80001e6:	22ff      	movs	r2, #255	; 0xff
 80001e8:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0x0;
 80001ea:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <main+0x9c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0xFF;
 80001f0:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <main+0x9c>)
 80001f2:	22ff      	movs	r2, #255	; 0xff
 80001f4:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0x0;
 80001f6:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <main+0x9c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fa72 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f83a 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f8dc 	bl	80003c0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000208:	f000 f888 	bl	800031c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800020c:	4816      	ldr	r0, [pc, #88]	; (8000268 <main+0xa0>)
 800020e:	f000 fc92 	bl	8000b36 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000212:	2102      	movs	r1, #2
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <main+0xa0>)
 8000216:	f000 fdad 	bl	8000d74 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 8; //Data length
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <main+0xa4>)
 800021c:	2208      	movs	r2, #8
 800021e:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0xa4>)
 8000222:	2200      	movs	r2, #0
 8000224:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0xa4>)
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x100; //Sender ID
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <main+0xa4>)
 800022e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000232:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	   // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	  	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK){
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0xa8>)
 8000236:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <main+0x9c>)
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <main+0xa4>)
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <main+0xa0>)
 800023c:	f000 fcbf 	bl	8000bbe <HAL_CAN_AddTxMessage>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d104      	bne.n	8000250 <main+0x88>
	  		status = 2000;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <main+0xac>)
 8000248:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	e003      	b.n	8000258 <main+0x90>
	  	}
	  	else{
	  		status = 3000;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0xac>)
 8000252:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000256:	601a      	str	r2, [r3, #0]
	  		}

	  	HAL_Delay(1000);
 8000258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025c:	f000 fa82 	bl	8000764 <HAL_Delay>
	  	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK){
 8000260:	e7e8      	b.n	8000234 <main+0x6c>
 8000262:	bf00      	nop
 8000264:	2000002c 	.word	0x2000002c
 8000268:	20000040 	.word	0x20000040
 800026c:	20000068 	.word	0x20000068
 8000270:	20000034 	.word	0x20000034
 8000274:	20000028 	.word	0x20000028

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fbc2 	bl	8002a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800029a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029e:	f001 fa63 	bl	8001768 <HAL_PWREx_ControlVoltageScaling>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a8:	f000 f8b4 	bl	8000414 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	2302      	movs	r3, #2
 80002c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002c6:	230a      	movs	r3, #10
 80002c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ca:	2307      	movs	r3, #7
 80002cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fa9a 	bl	8001814 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002e6:	f000 f895 	bl	8000414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2303      	movs	r3, #3
 80002f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002fe:	463b      	mov	r3, r7
 8000300:	2104      	movs	r1, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f001 fe6c 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030e:	f000 f881 	bl	8000414 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3758      	adds	r7, #88	; 0x58
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000322:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000324:	4a25      	ldr	r2, [pc, #148]	; (80003bc <MX_CAN1_Init+0xa0>)
 8000326:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <MX_CAN1_Init+0x9c>)
 800032a:	2214      	movs	r2, #20
 800032c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800032e:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_CAN1_Init+0x9c>)
 800033c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000340:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000344:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000348:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_CAN1_Init+0x9c>)
 800034c:	2200      	movs	r2, #0
 800034e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000352:	2200      	movs	r2, #0
 8000354:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000358:	2200      	movs	r2, #0
 800035a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <MX_CAN1_Init+0x9c>)
 800035e:	2200      	movs	r2, #0
 8000360:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000364:	2200      	movs	r2, #0
 8000366:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_CAN1_Init+0x9c>)
 800036a:	2200      	movs	r2, #0
 800036c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <MX_CAN1_Init+0x9c>)
 8000370:	f000 fa1c 	bl	80007ac <HAL_CAN_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800037a:	f000 f84b 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800037e:	2301      	movs	r3, #1
 8000380:	623b      	str	r3, [r7, #32]
   canfilterconfig.FilterBank = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
   canfilterconfig.FilterIdHigh = 0x0<<5;
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
   canfilterconfig.FilterIdLow = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
   canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
   canfilterconfig.FilterMaskIdLow = 0x0000;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800039e:	2301      	movs	r3, #1
 80003a0:	61fb      	str	r3, [r7, #28]
   canfilterconfig.SlaveStartFilterBank = 20;
 80003a2:	2314      	movs	r3, #20
 80003a4:	627b      	str	r3, [r7, #36]	; 0x24

   HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80003a6:	463b      	mov	r3, r7
 80003a8:	4619      	mov	r1, r3
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <MX_CAN1_Init+0x9c>)
 80003ac:	f000 faf9 	bl	80009a2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	3728      	adds	r7, #40	; 0x28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000040 	.word	0x20000040
 80003bc:	40006400 	.word	0x40006400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_GPIO_Init+0x2c>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a08      	ldr	r2, [pc, #32]	; (80003ec <MX_GPIO_Init+0x2c>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_GPIO_Init+0x2c>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d101      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000402:	f000 f98f 	bl	8000724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40014800 	.word	0x40014800

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x44>)
 8000428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <HAL_MspInit+0x44>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6613      	str	r3, [r2, #96]	; 0x60
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_MspInit+0x44>)
 8000434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <HAL_MspInit+0x44>)
 8000440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <HAL_MspInit+0x44>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	6593      	str	r3, [r2, #88]	; 0x58
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <HAL_MspInit+0x44>)
 800044c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <HAL_CAN_MspInit+0x90>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d131      	bne.n	80004ee <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <HAL_CAN_MspInit+0x94>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048e:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <HAL_CAN_MspInit+0x94>)
 8000490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000494:	6593      	str	r3, [r2, #88]	; 0x58
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <HAL_CAN_MspInit+0x94>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <HAL_CAN_MspInit+0x94>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <HAL_CAN_MspInit+0x94>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ae:	4b13      	ldr	r3, [pc, #76]	; (80004fc <HAL_CAN_MspInit+0x94>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c0:	2302      	movs	r3, #2
 80004c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004c8:	2303      	movs	r3, #3
 80004ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80004cc:	2309      	movs	r3, #9
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 ff8d 	bl	80013f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	2014      	movs	r0, #20
 80004e4:	f000 ff5e 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80004e8:	2014      	movs	r0, #20
 80004ea:	f000 ff77 	bl	80013dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004ee:	bf00      	nop
 80004f0:	3728      	adds	r7, #40	; 0x28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40006400 	.word	0x40006400
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	201a      	movs	r0, #26
 8000516:	f000 ff45 	bl	80013a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800051a:	201a      	movs	r0, #26
 800051c:	f000 ff5e 	bl	80013dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <HAL_InitTick+0x9c>)
 8000522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000524:	4a1d      	ldr	r2, [pc, #116]	; (800059c <HAL_InitTick+0x9c>)
 8000526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800052a:	6613      	str	r3, [r2, #96]	; 0x60
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <HAL_InitTick+0x9c>)
 800052e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000538:	f107 0210 	add.w	r2, r7, #16
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fedc 	bl	8002300 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000548:	f001 fec4 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 800054c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <HAL_InitTick+0xa0>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	0c9b      	lsrs	r3, r3, #18
 8000558:	3b01      	subs	r3, #1
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_InitTick+0xa4>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <HAL_InitTick+0xa8>)
 8000560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_InitTick+0xa4>)
 8000564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000568:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_InitTick+0xa4>)
 800056c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_InitTick+0xa4>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_InitTick+0xa4>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <HAL_InitTick+0xa4>)
 800057e:	f001 ff51 	bl	8002424 <HAL_TIM_Base_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d104      	bne.n	8000592 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <HAL_InitTick+0xa4>)
 800058a:	f001 ffad 	bl	80024e8 <HAL_TIM_Base_Start_IT>
 800058e:	4603      	mov	r3, r0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3730      	adds	r7, #48	; 0x30
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	431bde83 	.word	0x431bde83
 80005a4:	2000009c 	.word	0x2000009c
 80005a8:	40014800 	.word	0x40014800

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <NMI_Handler+0x4>

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler+0x4>

080005be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <UsageFault_Handler+0x4>

080005ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <CAN1_RX0_IRQHandler+0x10>)
 800060a:	f000 fbd9 	bl	8000dc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000040 	.word	0x20000040

08000618 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800061e:	f001 ffd3 	bl	80025c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000009c 	.word	0x2000009c

0800062c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <SystemInit+0x5c>)
 8000632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <SystemInit+0x5c>)
 8000638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800063c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <SystemInit+0x60>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a11      	ldr	r2, [pc, #68]	; (800068c <SystemInit+0x60>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <SystemInit+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <SystemInit+0x60>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a0d      	ldr	r2, [pc, #52]	; (800068c <SystemInit+0x60>)
 8000658:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800065c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000660:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <SystemInit+0x60>)
 8000664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000668:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <SystemInit+0x60>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <SystemInit+0x60>)
 8000670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000674:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <SystemInit+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	40021000 	.word	0x40021000

08000690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000694:	f7ff ffca 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000698:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800069a:	e003      	b.n	80006a4 <LoopCopyDataInit>

0800069c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800069e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006a2:	3104      	adds	r1, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006ac:	d3f6      	bcc.n	800069c <CopyDataInit>
	ldr	r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006b0:	e002      	b.n	80006b8 <LoopFillZerobss>

080006b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006b4:	f842 3b04 	str.w	r3, [r2], #4

080006b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LoopForever+0x16>)
	cmp	r2, r3
 80006ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006bc:	d3f9      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f002 f983 	bl	80029c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c2:	f7ff fd81 	bl	80001c8 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006c8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80006cc:	08002a88 	.word	0x08002a88
	ldr	r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006d4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006d8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006dc:	200000ec 	.word	0x200000ec

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_Init+0x3c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <HAL_Init+0x3c>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 fe47 	bl	800138e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000700:	200f      	movs	r0, #15
 8000702:	f7ff fefd 	bl	8000500 <HAL_InitTick>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	e001      	b.n	8000716 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000712:	f7ff fe85 	bl	8000420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000716:	79fb      	ldrb	r3, [r7, #7]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x20>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_IncTick+0x24>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <HAL_IncTick+0x24>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008
 8000748:	200000e8 	.word	0x200000e8

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <HAL_GetTick+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200000e8 	.word	0x200000e8

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff ffee 	bl	800074c <HAL_GetTick>
 8000770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_Delay+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078a:	bf00      	nop
 800078c:	f7ff ffde 	bl	800074c <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008

080007ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e0ed      	b.n	800099a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d102      	bne.n	80007d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fe4c 	bl	8000468 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f022 0202 	bic.w	r2, r2, #2
 80007de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007e0:	f7ff ffb4 	bl	800074c <HAL_GetTick>
 80007e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007e6:	e012      	b.n	800080e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007e8:	f7ff ffb0 	bl	800074c <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	d90b      	bls.n	800080e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2205      	movs	r2, #5
 8000806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e0c5      	b.n	800099a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1e5      	bne.n	80007e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f042 0201 	orr.w	r2, r2, #1
 800082a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800082c:	f7ff ff8e 	bl	800074c <HAL_GetTick>
 8000830:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000832:	e012      	b.n	800085a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000834:	f7ff ff8a 	bl	800074c <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	2b0a      	cmp	r3, #10
 8000840:	d90b      	bls.n	800085a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2205      	movs	r2, #5
 8000852:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e09f      	b.n	800099a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0e5      	beq.n	8000834 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7e1b      	ldrb	r3, [r3, #24]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d108      	bne.n	8000882 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e007      	b.n	8000892 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7e5b      	ldrb	r3, [r3, #25]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d108      	bne.n	80008ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e007      	b.n	80008bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7e9b      	ldrb	r3, [r3, #26]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d108      	bne.n	80008d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0220 	orr.w	r2, r2, #32
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e007      	b.n	80008e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f022 0220 	bic.w	r2, r2, #32
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7edb      	ldrb	r3, [r3, #27]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d108      	bne.n	8000900 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0210 	bic.w	r2, r2, #16
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e007      	b.n	8000910 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0210 	orr.w	r2, r2, #16
 800090e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d108      	bne.n	800092a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0208 	orr.w	r2, r2, #8
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e007      	b.n	800093a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f022 0208 	bic.w	r2, r2, #8
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7f5b      	ldrb	r3, [r3, #29]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d108      	bne.n	8000954 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f042 0204 	orr.w	r2, r2, #4
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	e007      	b.n	8000964 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0204 	bic.w	r2, r2, #4
 8000962:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	431a      	orrs	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	ea42 0103 	orr.w	r1, r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	430a      	orrs	r2, r1
 8000988:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b087      	sub	sp, #28
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ba:	7cfb      	ldrb	r3, [r7, #19]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d003      	beq.n	80009c8 <HAL_CAN_ConfigFilter+0x26>
 80009c0:	7cfb      	ldrb	r3, [r7, #19]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	f040 80aa 	bne.w	8000b1c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009ce:	f043 0201 	orr.w	r2, r3, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	2201      	movs	r2, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d123      	bne.n	8000a4a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3248      	adds	r2, #72	; 0x48
 8000a2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a40:	6979      	ldr	r1, [r7, #20]
 8000a42:	3348      	adds	r3, #72	; 0x48
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	440b      	add	r3, r1
 8000a48:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d122      	bne.n	8000a98 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3248      	adds	r2, #72	; 0x48
 8000a78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a8e:	6979      	ldr	r1, [r7, #20]
 8000a90:	3348      	adds	r3, #72	; 0x48
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d109      	bne.n	8000ab4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ab2:	e007      	b.n	8000ac4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ade:	e007      	b.n	8000af0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d107      	bne.n	8000b08 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b0e:	f023 0201 	bic.w	r2, r3, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e006      	b.n	8000b2a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
  }
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d12e      	bne.n	8000ba8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b62:	f7ff fdf3 	bl	800074c <HAL_GetTick>
 8000b66:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b68:	e012      	b.n	8000b90 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b6a:	f7ff fdef 	bl	800074c <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d90b      	bls.n	8000b90 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2205      	movs	r2, #5
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e012      	b.n	8000bb6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1e5      	bne.n	8000b6a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e006      	b.n	8000bb6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
  }
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b089      	sub	sp, #36	; 0x24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d003      	beq.n	8000bea <HAL_CAN_AddTxMessage+0x2c>
 8000be2:	7ffb      	ldrb	r3, [r7, #31]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	f040 80b8 	bne.w	8000d5a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10a      	bne.n	8000c0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d105      	bne.n	8000c0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 80a0 	beq.w	8000d4a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d907      	bls.n	8000c2a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e09e      	b.n	8000d68 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10d      	bne.n	8000c58 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	6809      	ldr	r1, [r1, #0]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3318      	adds	r3, #24
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	440b      	add	r3, r1
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e00f      	b.n	8000c78 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c62:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c68:	68f9      	ldr	r1, [r7, #12]
 8000c6a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c6c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3318      	adds	r3, #24
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	440b      	add	r3, r1
 8000c76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3318      	adds	r3, #24
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	440b      	add	r3, r1
 8000c88:	3304      	adds	r3, #4
 8000c8a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	7d1b      	ldrb	r3, [r3, #20]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d111      	bne.n	8000cb8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3318      	adds	r3, #24
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	6811      	ldr	r1, [r2, #0]
 8000ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3318      	adds	r3, #24
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3307      	adds	r3, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	061a      	lsls	r2, r3, #24
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3305      	adds	r3, #5
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	4610      	mov	r0, r2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	6811      	ldr	r1, [r2, #0]
 8000ce0:	ea43 0200 	orr.w	r2, r3, r0
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	440b      	add	r3, r1
 8000cea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000cee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	061a      	lsls	r2, r3, #24
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	041b      	lsls	r3, r3, #16
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	4610      	mov	r0, r2
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	ea43 0200 	orr.w	r2, r3, r0
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	440b      	add	r3, r1
 8000d20:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	6811      	ldr	r1, [r2, #0]
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3318      	adds	r3, #24
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	440b      	add	r3, r1
 8000d44:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e00e      	b.n	8000d68 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e006      	b.n	8000d68 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
  }
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3724      	adds	r7, #36	; 0x24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d84:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <HAL_CAN_ActivateNotification+0x1e>
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d109      	bne.n	8000da6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6959      	ldr	r1, [r3, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e006      	b.n	8000db4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000daa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
  }
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d07c      	beq.n	8000f00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f983 	bl	800112e <HAL_CAN_TxMailbox0CompleteCallback>
 8000e28:	e016      	b.n	8000e58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3c:	e00c      	b.n	8000e58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d004      	beq.n	8000e52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e50:	e002      	b.n	8000e58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f989 	bl	800116a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d024      	beq.n	8000eac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f963 	bl	8001142 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e7c:	e016      	b.n	8000eac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e90:	e00c      	b.n	8000eac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea4:	e002      	b.n	8000eac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f969 	bl	800117e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d024      	beq.n	8000f00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ebe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f943 	bl	8001156 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ed0:	e016      	b.n	8000f00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee4:	e00c      	b.n	8000f00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef8:	e002      	b.n	8000f00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f949 	bl	8001192 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00c      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2210      	movs	r2, #16
 8000f22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f93a 	bl	80011ba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d009      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f921 	bl	80011a6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00c      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	f003 0310 	and.w	r3, r3, #16
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2210      	movs	r2, #16
 8000f86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	f003 0320 	and.w	r3, r3, #32
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f91c 	bl	80011e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d009      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f903 	bl	80011ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f906 	bl	80011f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00b      	beq.n	800100c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2208      	movs	r2, #8
 8001004:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8ff 	bl	800120a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d07b      	beq.n	800110e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d072      	beq.n	8001106 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	2b00      	cmp	r3, #0
 8001060:	d008      	beq.n	8001074 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107a:	2b00      	cmp	r3, #0
 800107c:	d043      	beq.n	8001106 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03e      	beq.n	8001106 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800108e:	2b60      	cmp	r3, #96	; 0x60
 8001090:	d02b      	beq.n	80010ea <HAL_CAN_IRQHandler+0x32a>
 8001092:	2b60      	cmp	r3, #96	; 0x60
 8001094:	d82e      	bhi.n	80010f4 <HAL_CAN_IRQHandler+0x334>
 8001096:	2b50      	cmp	r3, #80	; 0x50
 8001098:	d022      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x320>
 800109a:	2b50      	cmp	r3, #80	; 0x50
 800109c:	d82a      	bhi.n	80010f4 <HAL_CAN_IRQHandler+0x334>
 800109e:	2b40      	cmp	r3, #64	; 0x40
 80010a0:	d019      	beq.n	80010d6 <HAL_CAN_IRQHandler+0x316>
 80010a2:	2b40      	cmp	r3, #64	; 0x40
 80010a4:	d826      	bhi.n	80010f4 <HAL_CAN_IRQHandler+0x334>
 80010a6:	2b30      	cmp	r3, #48	; 0x30
 80010a8:	d010      	beq.n	80010cc <HAL_CAN_IRQHandler+0x30c>
 80010aa:	2b30      	cmp	r3, #48	; 0x30
 80010ac:	d822      	bhi.n	80010f4 <HAL_CAN_IRQHandler+0x334>
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d002      	beq.n	80010b8 <HAL_CAN_IRQHandler+0x2f8>
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	d005      	beq.n	80010c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010b6:	e01d      	b.n	80010f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010c0:	e019      	b.n	80010f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010ca:	e014      	b.n	80010f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010d4:	e00f      	b.n	80010f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010de:	e00a      	b.n	80010f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010e8:	e005      	b.n	80010f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010f2:	e000      	b.n	80010f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80010f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001104:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2204      	movs	r2, #4
 800110c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f87c 	bl	800121e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff4c 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b6:	f7ff ff61 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f7ff ffb1 	bl	8001328 <NVIC_EncodePriority>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff80 	bl	80012d4 <__NVIC_SetPriority>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff54 	bl	8001298 <__NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e17f      	b.n	8001708 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8171 	beq.w	8001702 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d00b      	beq.n	8001440 <HAL_GPIO_Init+0x48>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	2b11      	cmp	r3, #17
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d130      	bne.n	80014a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001476:	2201      	movs	r2, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 0201 	and.w	r2, r3, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d118      	bne.n	80014e0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014b4:	2201      	movs	r2, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f003 0201 	and.w	r2, r3, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x128>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b12      	cmp	r3, #18
 800151e:	d123      	bne.n	8001568 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	6939      	ldr	r1, [r7, #16]
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0203 	and.w	r2, r3, #3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80ac 	beq.w	8001702 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <HAL_GPIO_Init+0x330>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	4a5e      	ldr	r2, [pc, #376]	; (8001728 <HAL_GPIO_Init+0x330>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6613      	str	r3, [r2, #96]	; 0x60
 80015b6:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <HAL_GPIO_Init+0x330>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c2:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_GPIO_Init+0x334>)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ec:	d025      	beq.n	800163a <HAL_GPIO_Init+0x242>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <HAL_GPIO_Init+0x338>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01f      	beq.n	8001636 <HAL_GPIO_Init+0x23e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <HAL_GPIO_Init+0x33c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x23a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x340>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x236>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x344>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x232>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x348>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x22e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_GPIO_Init+0x34c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x22a>
 800161e:	2306      	movs	r3, #6
 8001620:	e00c      	b.n	800163c <HAL_GPIO_Init+0x244>
 8001622:	2307      	movs	r3, #7
 8001624:	e00a      	b.n	800163c <HAL_GPIO_Init+0x244>
 8001626:	2305      	movs	r3, #5
 8001628:	e008      	b.n	800163c <HAL_GPIO_Init+0x244>
 800162a:	2304      	movs	r3, #4
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x244>
 800162e:	2303      	movs	r3, #3
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x244>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x244>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x244>
 800163a:	2300      	movs	r3, #0
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800164c:	4937      	ldr	r1, [pc, #220]	; (800172c <HAL_GPIO_Init+0x334>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_GPIO_Init+0x350>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800167e:	4a32      	ldr	r2, [pc, #200]	; (8001748 <HAL_GPIO_Init+0x350>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_GPIO_Init+0x350>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f ae78 	bne.w	8001408 <HAL_GPIO_Init+0x10>
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800
 8001738:	48000c00 	.word	0x48000c00
 800173c:	48001000 	.word	0x48001000
 8001740:	48001400 	.word	0x48001400
 8001744:	48001800 	.word	0x48001800
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_PWREx_GetVoltageRange+0x18>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40007000 	.word	0x40007000

08001768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001776:	d130      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001784:	d038      	beq.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178e:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001794:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2232      	movs	r2, #50	; 0x32
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0c9b      	lsrs	r3, r3, #18
 80017a8:	3301      	adds	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ac:	e002      	b.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c0:	d102      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f2      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d4:	d110      	bne.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e00f      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d007      	beq.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f0:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000
 800180c:	20000000 	.word	0x20000000
 8001810:	431bde83 	.word	0x431bde83

08001814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e3d4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001826:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001830:	4b9e      	ldr	r3, [pc, #632]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80e4 	beq.w	8001a10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_RCC_OscConfig+0x4a>
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	f040 808b 	bne.w	800196c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 8087 	bne.w	800196c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185e:	4b93      	ldr	r3, [pc, #588]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x62>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e3ac      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1a      	ldr	r2, [r3, #32]
 800187a:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_RCC_OscConfig+0x7c>
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188e:	e005      	b.n	800189c <HAL_RCC_OscConfig+0x88>
 8001890:	4b86      	ldr	r3, [pc, #536]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189c:	4293      	cmp	r3, r2
 800189e:	d223      	bcs.n	80018e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fd5d 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e38d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b4:	4b7d      	ldr	r3, [pc, #500]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a7c      	ldr	r2, [pc, #496]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b7a      	ldr	r3, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4977      	ldr	r1, [pc, #476]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	4972      	ldr	r1, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
 80018e6:	e025      	b.n	8001934 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6f      	ldr	r2, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b6d      	ldr	r3, [pc, #436]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	496a      	ldr	r1, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001906:	4b69      	ldr	r3, [pc, #420]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4965      	ldr	r1, [pc, #404]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fd1d 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e34d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001934:	f000 fc36 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	495a      	ldr	r1, [pc, #360]	; (8001ab0 <HAL_RCC_OscConfig+0x29c>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x2a0>)
 8001952:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x2a4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdd1 	bl	8000500 <HAL_InitTick>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d052      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	e331      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d032      	beq.n	80019da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001974:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001980:	f7fe fee4 	bl	800074c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001988:	f7fe fee0 	bl	800074c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e31a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	493b      	ldr	r1, [pc, #236]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c4:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	4936      	ldr	r1, [pc, #216]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e01a      	b.n	8001a10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a33      	ldr	r2, [pc, #204]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e6:	f7fe feb1 	bl	800074c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ee:	f7fe fead 	bl	800074c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e2e7      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x1da>
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d074      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x21a>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d10e      	bne.n	8001a46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d064      	beq.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d160      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e2c4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x24a>
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e01d      	b.n	8001a9a <HAL_RCC_OscConfig+0x286>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a66:	d10c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x26e>
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e00b      	b.n	8001a9a <HAL_RCC_OscConfig+0x286>
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_RCC_OscConfig+0x298>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01c      	beq.n	8001adc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fe53 	bl	800074c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa8:	e011      	b.n	8001ace <HAL_RCC_OscConfig+0x2ba>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002a38 	.word	0x08002a38
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7fe fe46 	bl	800074c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e280      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	4baf      	ldr	r3, [pc, #700]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x2a8>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7fe fe36 	bl	800074c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7fe fe32 	bl	800074c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e26c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af6:	4ba5      	ldr	r3, [pc, #660]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2d0>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d060      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x310>
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d116      	bne.n	8001b52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b24:	4b99      	ldr	r3, [pc, #612]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_OscConfig+0x328>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e249      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b93      	ldr	r3, [pc, #588]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	4990      	ldr	r1, [pc, #576]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b50:	e040      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d023      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5a:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a8b      	ldr	r2, [pc, #556]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7fe fdf1 	bl	800074c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fded 	bl	800074c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e227      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b80:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	497c      	ldr	r1, [pc, #496]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	e018      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b7a      	ldr	r3, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a79      	ldr	r2, [pc, #484]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7fe fdcd 	bl	800074c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7fe fdc9 	bl	800074c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e203      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc8:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	4a67      	ldr	r2, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7fe fda8 	bl	800074c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7fe fda4 	bl	800074c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1de      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c12:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ef      	beq.n	8001c00 <HAL_RCC_OscConfig+0x3ec>
 8001c20:	e01b      	b.n	8001c5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c22:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7fe fd8b 	bl	800074c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7fe fd87 	bl	800074c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1c1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80a6 	beq.w	8001db4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
 8001c84:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c90:	2301      	movs	r3, #1
 8001c92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_OscConfig+0x57c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d118      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x57c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <HAL_RCC_OscConfig+0x57c>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cac:	f7fe fd4e 	bl	800074c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7fe fd4a 	bl	800074c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e184      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_RCC_OscConfig+0x57c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d108      	bne.n	8001cec <HAL_RCC_OscConfig+0x4d8>
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cea:	e024      	b.n	8001d36 <HAL_RCC_OscConfig+0x522>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d110      	bne.n	8001d16 <HAL_RCC_OscConfig+0x502>
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d14:	e00f      	b.n	8001d36 <HAL_RCC_OscConfig+0x522>
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7fe fd05 	bl	800074c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe fd01 	bl	800074c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e139      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x578>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ed      	beq.n	8001d46 <HAL_RCC_OscConfig+0x532>
 8001d6a:	e01a      	b.n	8001da2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7fe fcee 	bl	800074c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d72:	e00f      	b.n	8001d94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe fcea 	bl	800074c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d906      	bls.n	8001d94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e122      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e8      	bne.n	8001d74 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	4a8a      	ldr	r2, [pc, #552]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8108 	beq.w	8001fce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	f040 80d0 	bne.w	8001f68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dc8:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d130      	bne.n	8001e3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	3b01      	subs	r3, #1
 8001de8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d127      	bne.n	8001e3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11f      	bne.n	8001e3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e08:	2a07      	cmp	r2, #7
 8001e0a:	bf14      	ite	ne
 8001e0c:	2201      	movne	r2, #1
 8001e0e:	2200      	moveq	r2, #0
 8001e10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d113      	bne.n	8001e3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	3b01      	subs	r3, #1
 8001e38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d06e      	beq.n	8001f1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d069      	beq.n	8001f18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e44:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b7      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e60:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a5c      	ldr	r2, [pc, #368]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e6c:	f7fe fc6e 	bl	800074c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe fc6a 	bl	800074c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0a4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	4b54      	ldr	r3, [pc, #336]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e92:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x7c8>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ea2:	3a01      	subs	r2, #1
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eac:	0212      	lsls	r2, r2, #8
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eb4:	0852      	lsrs	r2, r2, #1
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	0552      	lsls	r2, r2, #21
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ec0:	0852      	lsrs	r2, r2, #1
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	0652      	lsls	r2, r2, #25
 8001ec6:	4311      	orrs	r1, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ecc:	0912      	lsrs	r2, r2, #4
 8001ece:	0452      	lsls	r2, r2, #17
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	4941      	ldr	r1, [pc, #260]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef0:	f7fe fc2c 	bl	800074c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fc28 	bl	800074c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e062      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f16:	e05a      	b.n	8001fce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e059      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d152      	bne.n	8001fce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f40:	f7fe fc04 	bl	800074c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fc00 	bl	800074c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e03a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x734>
 8001f66:	e032      	b.n	8001fce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d02d      	beq.n	8001fca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f8c:	f023 0303 	bic.w	r3, r3, #3
 8001f90:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001f98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fbd3 	bl	800074c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fbcf 	bl	800074c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e009      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x796>
 8001fc8:	e001      	b.n	8001fce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	f99d808c 	.word	0xf99d808c

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0c8      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4961      	ldr	r1, [pc, #388]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0b0      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d04c      	beq.n	80020ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002038:	4b56      	ldr	r3, [pc, #344]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d121      	bne.n	8002088 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e09e      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002050:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d115      	bne.n	8002088 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e092      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002068:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e086      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002078:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e07e      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002088:	4b42      	ldr	r3, [pc, #264]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 0203 	bic.w	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	493f      	ldr	r1, [pc, #252]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209a:	f7fe fb57 	bl	800074c <HAL_GetTick>
 800209e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a2:	f7fe fb53 	bl	800074c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e066      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 020c 	and.w	r2, r3, #12
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d1eb      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	492c      	ldr	r1, [pc, #176]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d210      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4924      	ldr	r1, [pc, #144]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_RCC_ClockConfig+0x1b0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e036      	b.n	8002186 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4918      	ldr	r1, [pc, #96]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4910      	ldr	r1, [pc, #64]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002156:	f000 f825 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_ClockConfig+0x1b4>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490c      	ldr	r1, [pc, #48]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9c0 	bl	8000500 <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
 8002182:	72fb      	strb	r3, [r7, #11]

  return status;
 8002184:	7afb      	ldrb	r3, [r7, #11]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000
 8002194:	40021000 	.word	0x40021000
 8002198:	08002a38 	.word	0x08002a38
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x34>
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d121      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d11e      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e005      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002214:	e00a      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d102      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e004      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d101      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800222a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d134      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0xa6>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d003      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0xac>
 8002248:	e005      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800224c:	617b      	str	r3, [r7, #20]
      break;
 800224e:	e005      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002252:	617b      	str	r3, [r7, #20]
      break;
 8002254:	e002      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	617b      	str	r3, [r7, #20]
      break;
 800225a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	3301      	adds	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	fb02 f203 	mul.w	r2, r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	0e5b      	lsrs	r3, r3, #25
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	3301      	adds	r3, #1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800229c:	69bb      	ldr	r3, [r7, #24]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08002a50 	.word	0x08002a50
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200

080022bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022d8:	f7ff fff0 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0adb      	lsrs	r3, r3, #11
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08002a48 	.word	0x08002a48

08002300 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	220f      	movs	r2, #15
 800230e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	08db      	lsrs	r3, r3, #3
 800233a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_RCC_GetClockConfig+0x60>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0207 	and.w	r2, r3, #7
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40022000 	.word	0x40022000

08002364 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff f9e6 	bl	800174c <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
 8002382:	e014      	b.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff f9d6 	bl	800174c <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d10b      	bne.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d919      	bls.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2ba0      	cmp	r3, #160	; 0xa0
 80023c0:	d902      	bls.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c2:	2302      	movs	r3, #2
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e013      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e010      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d902      	bls.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023d4:	2303      	movs	r3, #3
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e00a      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d102      	bne.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e0:	2302      	movs	r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e004      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d101      	bne.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ec:	2301      	movs	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0207 	bic.w	r2, r3, #7
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e049      	b.n	80024ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f841 	bl	80024d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 f9f8 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04f      	b.n	80025a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_TIM_Base_Start_IT+0xc4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x76>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d018      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x76>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x76>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x76>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x76>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x76>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d115      	bne.n	800258a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002566:	4013      	ands	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d015      	beq.n	800259c <HAL_TIM_Base_Start_IT+0xb4>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002576:	d011      	beq.n	800259c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	e008      	b.n	800259c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e000      	b.n	800259e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	40013400 	.word	0x40013400
 80025c0:	40014000 	.word	0x40014000
 80025c4:	00010007 	.word	0x00010007

080025c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0202 	mvn.w	r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f905 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8f7 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f908 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0204 	mvn.w	r2, #4
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8db 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8cd 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8de 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8b1 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f8a3 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8b4 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0210 	mvn.w	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2208      	movs	r2, #8
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f887 	bl	800281a <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f879 	bl	8002806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f88a 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0201 	mvn.w	r2, #1
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd fe52 	bl	80003f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f914 	bl	80029a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002786:	d10e      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800279e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f907 	bl	80029b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d10e      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d107      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f838 	bl	8002842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d10e      	bne.n	80027fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d107      	bne.n	80027fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f06f 0220 	mvn.w	r2, #32
 80027f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f8c7 	bl	800298c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a40      	ldr	r2, [pc, #256]	; (800296c <TIM_Base_SetConfig+0x114>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d00f      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3d      	ldr	r2, [pc, #244]	; (8002970 <TIM_Base_SetConfig+0x118>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <TIM_Base_SetConfig+0x11c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <TIM_Base_SetConfig+0x120>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a3a      	ldr	r2, [pc, #232]	; (800297c <TIM_Base_SetConfig+0x124>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a2f      	ldr	r2, [pc, #188]	; (800296c <TIM_Base_SetConfig+0x114>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01f      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d01b      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <TIM_Base_SetConfig+0x118>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d017      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <TIM_Base_SetConfig+0x11c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <TIM_Base_SetConfig+0x120>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00f      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <TIM_Base_SetConfig+0x124>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a28      	ldr	r2, [pc, #160]	; (8002980 <TIM_Base_SetConfig+0x128>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a27      	ldr	r2, [pc, #156]	; (8002984 <TIM_Base_SetConfig+0x12c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_Base_SetConfig+0x9a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <TIM_Base_SetConfig+0x130>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d108      	bne.n	8002904 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <TIM_Base_SetConfig+0x114>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00f      	beq.n	8002950 <TIM_Base_SetConfig+0xf8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <TIM_Base_SetConfig+0x124>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00b      	beq.n	8002950 <TIM_Base_SetConfig+0xf8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <TIM_Base_SetConfig+0x128>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0xf8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <TIM_Base_SetConfig+0x12c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0xf8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <TIM_Base_SetConfig+0x130>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d103      	bne.n	8002958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	615a      	str	r2, [r3, #20]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40000c00 	.word	0x40000c00
 800297c:	40013400 	.word	0x40013400
 8002980:	40014000 	.word	0x40014000
 8002984:	40014400 	.word	0x40014400
 8002988:	40014800 	.word	0x40014800

0800298c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <__libc_init_array>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	4d0d      	ldr	r5, [pc, #52]	; (8002a00 <__libc_init_array+0x38>)
 80029cc:	4c0d      	ldr	r4, [pc, #52]	; (8002a04 <__libc_init_array+0x3c>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	2600      	movs	r6, #0
 80029d4:	42a6      	cmp	r6, r4
 80029d6:	d109      	bne.n	80029ec <__libc_init_array+0x24>
 80029d8:	4d0b      	ldr	r5, [pc, #44]	; (8002a08 <__libc_init_array+0x40>)
 80029da:	4c0c      	ldr	r4, [pc, #48]	; (8002a0c <__libc_init_array+0x44>)
 80029dc:	f000 f820 	bl	8002a20 <_init>
 80029e0:	1b64      	subs	r4, r4, r5
 80029e2:	10a4      	asrs	r4, r4, #2
 80029e4:	2600      	movs	r6, #0
 80029e6:	42a6      	cmp	r6, r4
 80029e8:	d105      	bne.n	80029f6 <__libc_init_array+0x2e>
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f0:	4798      	blx	r3
 80029f2:	3601      	adds	r6, #1
 80029f4:	e7ee      	b.n	80029d4 <__libc_init_array+0xc>
 80029f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fa:	4798      	blx	r3
 80029fc:	3601      	adds	r6, #1
 80029fe:	e7f2      	b.n	80029e6 <__libc_init_array+0x1e>
 8002a00:	08002a80 	.word	0x08002a80
 8002a04:	08002a80 	.word	0x08002a80
 8002a08:	08002a80 	.word	0x08002a80
 8002a0c:	08002a84 	.word	0x08002a84

08002a10 <memset>:
 8002a10:	4402      	add	r2, r0
 8002a12:	4603      	mov	r3, r0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d100      	bne.n	8002a1a <memset+0xa>
 8002a18:	4770      	bx	lr
 8002a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1e:	e7f9      	b.n	8002a14 <memset+0x4>

08002a20 <_init>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	bf00      	nop
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr

08002a2c <_fini>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	bf00      	nop
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr
